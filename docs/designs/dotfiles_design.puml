@startuml dotfiles design

package package_installer {

    struct Package {
        + name: str
        + manager: Manager
        + version: str
    }
    enum Manager {
        manager: str
    }

    abstract PackageManagerMapper {
        + map(package_name: str) -> PackageInfo
    }
    class AptPackageManagerMapper
    class SnapPackageManagerMapper

    class PackageHandler {
        + check_if_package_exists(package: Package) -> bool
        + install_package(package: Package) -> bool
    }
    class PackageInstaller {
        - packages_to_install: List[Package]
    }

    struct PackageInfo {
        + name: str
        + found: str
        + installed: str
        + installed_version: str
    }
}

class Main {
    + installers: List[Installer]
}

abstract Installer {
    + install() -> bool
}

class DotfilesInstaller {
    This will be extended later
}
class GsettingsInstaller {
    This will be extended later
}
class NeovimInstaller {
    This will be extended later
}

package etc {
    struct PackagesToInstall {
        + packages: List[Package]
    }
}

Main <-- Installer
Installer --|> PackageInstaller
Installer -|> DotfilesInstaller
Installer -|> NeovimInstaller
Installer -|> GsettingsInstaller
PackageManagerMapper --|> AptPackageManagerMapper
PackageManagerMapper --|> SnapPackageManagerMapper
PackageHandler <-- PackageManagerMapper
PackageInstaller <-- PackageHandler
PackageInstaller <- PackagesToInstall

PackageHandler <- Package
PackageHandler <- PackageInfo
PackageManagerMapper <- PackageInfo

PackageInstaller <-- Package
PackagesToInstall <- Package
@enduml