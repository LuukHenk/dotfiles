#!/usr/bin/env python3

""" Installer of the dotfiles setup """

### Imports {{{
#
import json
import os
import subprocess
import sys

from lib.package_info import PackagesInfo
from lib.config_installer import config_installer
import etc.gsettings as gsettings
#
# }}}

# Set paths {{{
#
FILE_DIR = os.path.dirname(os.path.realpath(__file__)) # The path to this file
HOME_DIR = os.path.expanduser("~") # The users home directiory
#
# The path to the json package
PACKAGES_PATH = os.path.realpath("/".join([FILE_DIR, "packages.json"]))
PACKAGES_SET = "standard" # Key for package set in packages_path
#
#}}}

### Main program {{{
#
# Main function
def main():
    """
    Main function of the script. Finds package/config information in json file,
    asks the user to check for package versions,
    asks the user to install configuration files,
    asks the user to install neovim plugins,
    and asks the user to edit the UI (in progress......).
    """
    # Obtain the packages (using the PACKAGES_SET key) and the managers from the .json package file
    packages, managers_bin_paths = get_packages(PACKAGES_PATH)

    # Split the package information {
    #
    package_data = {} # Uses package name and package manager(s) for package detection
    config_data = {} # Uses configuration source- and destination paths to set config files
    nvim_plug_data = {} # Uses the plugin installer file to install/update/upgrade neovim plugins
    for package in packages:
        # Uses all managers if package['package_managers'] is None
        if package["package_name"]:
            package_data[package["package_name"]] = package["package_manager"]
        #
        if package["config_source_path"] and package["config_destination_path"]:
            config_data[package["config_source_path"]] = package["config_destination_path"]
        #
        if package["package_name"] == "nvim":
            nvim_plug_data[package["plug_source"]] = package["plug_destination_path"]
    #
    # }

    #TODO comment this
    obtain_versions = input("\033[1mCheck if your programs are up to date? [y/N] \033[0m").lower()
    if obtain_versions in ("y", "yes"):
        version_obtainer(package_data, managers_bin_paths)

    #TODO comment this
    install_config = input("\033[1mUpdate configuration files? [y/N] \033[0m").lower()
    if install_config in ("y", "yes"):
        config_installer(get_real_paths(config_data))

    #TODO comment this
    install_nvim_plugins = input("\033[1mInstall Neovim plugins? [y/N] \033[0m").lower()
    if install_nvim_plugins in ("y", "yes"):
        nvim_plug_installer(nvim_plug_data)

    # Ask the user to edit gsettings / desktop settings {
    #
    interface_settings = input("\033[1mEdit gsettings/desktop settings? [y/N] \033[0m").lower()
    if interface_settings in ("y", "yes"):
        for schema in gsettings.DATA:
            for key, val in gsettings.DATA[schema].items():
                gset_command = " ".join(["gsettings set", schema, key, val])
                print(gset_command)
                os.system(gset_command)
    #
    # }
#
#}}}

### Check the latest package versions {{{
#
def version_obtainer(package_data, managers_bin_paths):
    """
    Ask user to check if the programs found in package_data are up to date with the given manager(s)
    """

    # Import the packages info file to obtain the package version data
    packages_info = PackagesInfo()
    packages_info.managers_bins = managers_bin_paths # Set the package managers
    # Check the version info for each package in package_data
    print("Checking for package versions...")
    for package in package_data:
        print(f"- {package}", end="\r")
        packages_info.get_package_info(package, package_data[package])
        print("                                                         ", end="\r")

    # Print package_version info
    print("----------------------------------------------------")
    packages_info.render_version_info()
    print("----------------------------------------------------")
#
# }}}

def nvim_plug_installer(nvim_plug_data):

    # Check if there is plugin data
    if len(nvim_plug_data) != 0:

        # Check if the plugin installation file is on it's destination
        nvim_plug_full_paths = get_real_paths(nvim_plug_data)
        dest = nvim_plug_full_paths[next(iter(nvim_plug_full_paths))]
        # If not, ask the user to add it
        if not os.path.isfile(dest):
            config_installer(nvim_plug_full_paths)

        # If the plugin installtion file exists, install the neovim plugins
        if os.path.isfile(dest):
            try:
                subprocess.run(
                    ["nvim", "+PlugInstall", "+PlugUpdate", "+PlugUpgrade", "+qa"],
                    check=True
                )
            except subprocess.CalledProcessError as err:
                print((
                    "\x1b[31mError: \x1b[39m"
                    f" Failed to run the nvim plugin installer...\n{err}"
                ))
        else:
            print((
                "\x1b[31mError: \x1b[39m"
                f" The plugin nvim installer file ({'dest'}) can not be found ..."
            ))

    else:
        print((
            f"\x1b[31mError: \x1b[39mCan't find the 'nvim' package in"
            " the packages configuration file"
            f" ('{PACKAGES_PATH}') ..."
        ))

### Find the correct package sets/managers in the packages.json file {{{
#
def get_packages(path):
    """
    Open json package file and obtains the preferred package sets
    Also searches for package managers and their bins
    Returns the packages from the preferred package sets
    and the package managers with their bin folder
    """

    # Try to open the packages file
    try:
        with open(path, 'r') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        print(f"Packages file {path} does not exist")
        sys.exit()
    else:
        print(f"Found packages configuration file: {path}")

    # Try to find the correct package sets
    packages = []
    if PACKAGES_SET == "basic":      # Basic packages/config
        packages = data["basic"]
    elif PACKAGES_SET == "standard": # Standard packages/config
        packages = data["basic"]
        packages += data["standard"]
    elif PACKAGES_SET == "full":     # All packages/config
        packages = data["basic"]
        packages += data["standard"]
        packages += data["full"]

    if len(packages) == 0:
        print((
            "\x1b[31mError: \x1b[39m"
            f"The PACKAGES_SET '{PACKAGES_SET}'"
            " does not contain packages."
            " For more information, look up the 'get_packages' function"
            " in the setup_installer script ..."
        ))
        sys.exit()

    # Find the package managers in the managers_bin key in the .json file
    try:
        managers_bin_paths = data["managers_bins"] # Obtain the managers and their bin folders
        if len(managers_bin_paths) == 0:
            print((
                "\x1b[31mError: \x1b[39m"
                f"No package managers found in the managers_bin key in {path}..."
            ))
    except KeyError:
        print((
            "\n"
            "\x1b[31mError: \x1b[39m"
            f"The 'managers_bins' key is missing in the {path} file"
            "\nPlease add the managers_bins key to the second line of the file"
            ": '\"managers_bins\": {\"/usr/bin\": \"apt\"},'"
            "\nExitting program..."
        ))
        sys.exit()

    # Return a tullip: packages to check and the managers to check the packages
    return (packages, managers_bin_paths)
#
#}}}

### Get the full path of directories/files {{{
#
def get_real_paths(dict_paths):
    " Find the full path of paths that start with a '.' or '~' "

    full_paths = {}
    for source, dest in dict_paths.items():

        # Obtain the complete path of the source files
        if source[0] == ".":
            new_source = FILE_DIR + source[1:]
        elif source[0] == "~":
            new_source = HOME_DIR + source[1:]
        else:
            new_source = source

        # Obtain the complete path of the destination files
        if dest[0] == ".":
            new_dest = FILE_DIR + dest[1:]
        elif dest[0] == "~":
            new_dest = HOME_DIR + dest[1:]
        else:
            new_dest = dest

        # Set the new path
        full_paths[new_source] = new_dest

    return full_paths
#
# }}}

### Run main program {{{
#
main()
sys.exit()
#
# }}}
