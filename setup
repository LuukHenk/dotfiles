#!/usr/bin/env python3

""" Installer of the dotfiles setup """
from pathlib import Path
import subprocess
import json
from os import popen, system
from colorama import Fore, Style

APT_PACKAGES = [
    "nvim",
    "terminator",
    "wget",
    "python3",
    "pip3",
    "htop",
    "pylint",
    "git"
]

REPO = Path().absolute()/"etc"

DOTFILES = {
    # Repo_path          Deploy_path
    REPO/"bashrc":       Path.home()/".bashrc",
    REPO/"inputrc":      Path.home()/".inputrc",
    REPO/"terminator":   Path.home()/".config/terminator/config",
    REPO/"init.vim":     Path.home()/".config/nvim/init.vim",
}

NVIM_PLUG = {"repo_path": REPO/"plug.vim", "deploy_path": Path.home()/".config/nvim/autoload/plug.vim"}

GSETTING_CONFIG_PATH = REPO/"gsettings.json"


def check_packages(packages):
    """
    Checks if the given packages are installed by checking the save location

    Arguments:
        packages (list): list of package names
    """
    for package in packages:
        if popen("which "+package).read():
            print(f"{Fore.GREEN}Package {package} is installed")
        else:
            print(f"{Fore.RED}Package {package} is not installed")
    print(Style.RESET_ALL)

def symlink_dotfiles(dotfiles):
    """
    Checks if the dotfiles save location already exists
    and asks the user to (re)create a symbolic link for the repo dot files

    Arguments:
        dotfiles (dict): repo path as key and deploy path as value
    """
    for repo_path, deploy_path in dotfiles.items():
        if deploy_path.is_symlink():
            answer = input(f"{deploy_path} already exists, overwrite? [y/N]")
        else:
            answer = input(f"Create symlink {deploy_path}? [y/N]")

        if answer.lower() in ["y", "yes"]:
            deploy_path.unlink(missing_ok=True)
            deploy_path.symlink_to(repo_path)
            print(f"Created symlink from {repo_path} to {deploy_path}")

def neovim_plugin_installer(plug):
    """
    Checks if neovim is installed. The function is skipped if not installed
    Then deploys the pluginstaller packages
    Finally tries to install the plugins

    Arguments:
        plug (dict): should contain
            'deploy_path': <deploy location> and
            'repo_path': <plug file in repo>
    """

    try:
        if not popen("which nvim").read():
            raise OSError()
    except OSError:
        print("".join([
            f"{Fore.RED}Error{Style.RESET_ALL}: Neovim not found, ",
            "plugin installation skipped"
        ]))
        return

    # Deploy pluginstaller
    plug["deploy_path"].unlink(missing_ok=True)
    plug["deploy_path"].symlink_to(plug["repo_path"])

    try:
        subprocess.run(
            ["nvim", "+PlugInstall", "+PlugUpdate", "+PlugUpgrade", "+qa"],
            check=True
        )
    except subprocess.CalledProcessError as error:
        print("".join([
            f"{Fore.RED}Error{Style.RESET_ALL}: Failed to run the installer.",
            f"{error}"
        ]))
        return

def gsetting_config_installer(gsetting_config_path):
    """
    Installs the configuration for the gsettings, which should be located
    in the gsetting_config_path json file.

    arguments:
        gsetting_config_path: Path to the JSON gsetting configuration file
    """

    try:
        gconfig = json.load(open(gsetting_config_path, "r"))
    except FileNotFoundError:
        print("".join([
            f"{Fore.RED}Error{Style.RESET_ALL}: ",
            "gsettings config file not found. ",
            "Skippig gsettings configuration installation."
        ]))
        return

    for schema in gconfig:
        for key, value in gconfig[schema].items():
            system(f"gsettings set {schema} {key} {value}")

def main():
    """
    Main function of the script

    Checks if all packages are installed on the computer
    and checks if the dotfiles are symlinked
    """

    answer = input(f"-- Check if apt packages are installed? [y/N]")
    if answer.lower() in ["y", "yes"]:
        check_packages(APT_PACKAGES)

    answer = input(f"-- Check if dotfiles are symlinked? [y/N]")
    if answer.lower() in ["y", "yes"]:
        symlink_dotfiles(DOTFILES)

    answer = input("-- Install Neovim plugins? [y/N]")
    if answer.lower() in ["y", "yes"]:
        neovim_plugin_installer(NVIM_PLUG)

    answer = input("-- Install gsettings configuration? [y/N]")
    if answer.lower() in ["y", "yes"]:
        gsetting_config_installer(GSETTING_CONFIG_PATH)

if __name__ == "__main__":
    main()
