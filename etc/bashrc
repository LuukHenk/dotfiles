#!/usr/bin/env bash

# My .bashrc
# Heavily inspired by mathiasbynens: https://github.com/mathiasbynens/dotfiles
#
#

### Aliases {{{
#
# Bash statement shortcuts
alias qq='exit'
alias ls='ls --color=auto'
alias ll='ls -l -h -a --color=auto'
alias rmf='rm -f'
alias Rm='rm -r'
alias Rmf='rm -f -r'
#
# Easy navigation
alias home='cd ~/Dropbox/A-home'
alias bio='cd ~/Dropbox/A-home/Bioinformatics/period_1'

#
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
#
# Program aliases
alias files='nautilus .'
alias storage='ncdu'
alias python=python3
alias teams='cd ~ && ./Documents/teams/usr/bin/teams'
#
# }}}

### Settings {{{
#
# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;
#
# Append to the Bash history file, rather than overwriting it
shopt -s histappend;
#
# Autocorrect typos in path names when using `cd`
shopt -s cdspell;
#
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
#
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
  shopt -s "$option" 2> /dev/null;
done;
#
# Add tab completion for many Bash commands

if which brew &> /dev/null && [ -f "$(brew --prefix)/share/bash-completion/bash_completi
on" ]; then
  source "$(brew --prefix)/share/bash-completion/bash_completion";
elif [ -f /etc/bash_completion ]; then
  source /etc/bash_completion;
fi;
#
# }}}

### Colors {{{
#
if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 26);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 135);
	red=$(tput setaf 124);
	violet=$(tput setaf 57);
	white=$(tput setaf 15);
	yellow=$(tput setaf 221);

else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;
#
# }}}

### Terminal prompt {{{
#
# Find git information
prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return;
	#
	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	repoUrl="$(git config --get remote.origin.url)";
	if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
		s+='*';
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+';
		fi;
		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!';
		fi;
		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?';
		fi;
		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$';
		fi;
	fi;
	#
	[ -n "${s}" ] && s=" [${s}]";
	#
	echo -e "${1}${branchName}${2}${s}";
}

# Set prompt
PS1="\[$red\]${debian_chroot:+($debian_chroot)}"; # Are we root?
PS1+="\[$blue\]\w"; # Working directory
PS1+="\$(prompt_git \"\[$white\] @\[$yellow\] \")"; # @ Git repository details
PS1+="\[$white\] $ \[$reset\]"; # $ and reset
export PS1;
#
# }}}
